# GENETIC ALGORITHM FOR FALLING BALL GAME

# ------------------- RULES --------------------------------------------------------------------------------------

# -each population is 51 chromosomes
# -intermediate population is 25 chromosomes
# -offspring is generated by 25 parents chosen with probability proportional to ranking position based on fitness
# -elitism implemented by keeping best string and default selecting it to generate offspring

from game import falling_ball_game

import numpy as np
import random as rn
from copy import copy, deepcopy
from aux_func import parent_selection,offspring_method

# ------------------ GA FUNCTION ---------------------------------------------------------------------------------

# function to progress into generation a desired amount of steps
# INPUTS:  initial_population: matrix containing 51 chromosomes, each of length n
#          steps: int number of iteration over generations 
#          N : dimension of falling ball arena         |
#          lbd : parameter of fitness function         |   parameters to pass to falling_ball_game
#          s : board width                             |
# RETURNS: average fitness of last generation
#          matrix of last generation

def GA_falling_ball(initial_population, steps, N, lbd, s):

    current_population=deepcopy(initial_population)
    average_fitness = np.zeros(steps)

    # start iteration over generations
    for generation in range(steps):

        # rank and select parents (25: 1 is the best performing, the others selected with p proportional to ranking position)
        parents_indices = parent_selection('fitness_proportional', current_population, 25, N, lbd, s)

        # generate offspring: method='two_by_two'
        new_generation=offspring_method(parents_indices, current_population, 'traditional_cross')

        # evaluate efficiency of new generation and store 
        avg_fit_new = np.mean(np.asarray([falling_ball_game(chromosome, N, lbd, s) for chromosome in new_generation]))
        average_fitness[generation] = avg_fit_new 
        
        # prepare to repeat breeding
        current_population = new_generation
    
    return [avg_fit_new, current_population]

N=11
n=2*(N-1)*(2*(N-1)+1)
trial_chromosomes=array = np.ones((51,n))
for row in range(trial_chromosomes.shape[0]):
    for column in range(trial_chromosomes.shape[1]):
        if rn.random()<0.5: trial_chromosomes[row][column]-=2

print(GA_falling_ball(trial_chromosomes, 2, N, 0.5, 3))    


