# GENETIC ALGORITHM FOR FALLING BALL GAME

# ------------------- RULES --------------------------------------------------------------------------------------

# -each population is 51 chromosomes
# -intermediate population is 25 chromosomes
# -offspring is generated by 25 parents chosen with probability proportional to ranking position based on fitness
# -elitism implemented by keeping best string and default selecting it to generate offspring

from game import falling_ball_game

import numpy as np
import random as rn
from copy import deepcopy
from aux_func import parent_selection,offspring_method
import matplotlib.pyplot as plt

# ------------------ GA FUNCTION ---------------------------------------------------------------------------------

# function to progress into generation a desired amount of steps
# INPUTS:  initial_population: matrix containing 51 chromosomes, each of length n
#          steps: int number of iteration over generations 
#          N : dimension of falling ball arena         |
#          lbd : parameter of fitness function         |   parameters to pass to falling_ball_game
#          s : board width                             |
# RETURNS: average fitness of last generation
#          matrix of last generation

def GA_falling_ball(initial_population, steps, N, lbd, s):

    current_population=deepcopy(initial_population)
    n = len(current_population[0,:])
    average_fitness = np.zeros(steps)
    evolution_best_chromosomes = np.zeros((steps,n))
    # start iteration over generations
    for generation in range(steps):

        # rank and select parents (25: 1 is the best performing, the others selected with p proportional to ranking position)
        parents_indices = parent_selection('fitness_proportional', current_population, 25, N, lbd, s)

        # generate offspring: method='two_by_two'
        new_generation=offspring_method(parents_indices, current_population, 'traditional_cross')

        # evaluate efficiency of new generation and store 
        fitnesses = np.asarray([falling_ball_game(chromosome, N, lbd, s) for chromosome in new_generation])
        avg_fit_new = np.mean(fitnesses)
        average_fitness[generation] = avg_fit_new 
        
        # prepare to repeat breeding
        current_population = new_generation
        
        # save best chromosome
        evolution_best_chromosomes[generation] = np.asarray(current_population[np.argsort(fitnesses)[-1]])
   
    # save best chromosomes and final population in text file
    np.savetxt('final_population.txt', current_population,fmt='%0.0d')
    np.savetxt('evolution_best_chromosomes.txt', evolution_best_chromosomes,fmt='%1.0d')
    
    return [avg_fit_new, average_fitness, current_population]

#N=11
#n=2*(N-1)*(2*(N-1)+1)
#trial_chromosomes=array = np.ones((51,n))
#for row in range(trial_chromosomes.shape[0]):
#    for column in range(trial_chromosomes.shape[1]):
#        if rn.random()<0.5: trial_chromosomes[row][column]-=2
#
#results=GA_falling_ball(trial_chromosomes, 100, N, 0.5, 3)
#print(results) 
#
##plot average fitness over generations
#
#plt.figure(figsize=(10,7))
#
#plt.plot(np.arange(0,100),results[1])
#plt.grid()
#
#plt.ylabel('Average fitness of the population',fontsize=20)
#plt.xlabel('generation',fontsize=20)
#plt.title('Average fitness over generation',fontsize=25)
#
#
#plt.show()


